<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8" />
        <meta
            name="viewport"
            content="width=device-width, initial-scale=1.0"
        />
        <script src="/socket.io/socket.io.js"></script>
        <title>Document</title>
        <style>
            #body {
                width: 100%;
                height: 70vh;
                position: relative;
                background: #75e3c4;
            }

            #chat {
                position: absolute;
                bottom: 0px;
                width: 100%;
                display: flex;
                justify-content: space-between;
            }

            #chat input {
                width: 80%;
            }

            .my-chat {
                display: flex;
                justify-content: end;
                padding: 2px 0px;
            }

            .my-chat p {
                margin: 0;
                padding: 10px;
                background: yellow;
                margin-right: 10px;
                border-radius: 10px;
            }

            .other-chat {
                display: flex;
                justify-content: start;
                padding: 2px 0px;
            }

            .other-chat p {
                margin: 0;
                padding: 10px;
                background: white;
                margin-left: 10px;
                border-radius: 10px;
            }

            .other-ear {
                display: flex;
                justify-content: start;
                padding: 2px 0px;
            }

            .other-ear p {
                margin: 0;
                padding: 10px;
                background: pink;
                margin-left: 10px;
                border-radius: 10px;
            }

            .my-ear {
                display: flex;
                justify-content: end;
                padding: 2px 0px;
            }

            .my-ear p {
                margin: 0;
                padding: 10px;
                background: pink;
                margin-right: 10px;
                border-radius: 10px;
            }

            .announcement {
                margin: 7px auto;
                background: rgba(0, 0, 0, 0.311);
                text-align: center;
                color: white;
                width: 80%;
                border: none;
                border-radius: 15px;
            }
        </style>
    </head>

    <body>
        <div id="main">
            <form id="room">
                <input
                    type="text"
                    id="roomName"
                    placeholder="채팅방 만들기"
                />
                <input
                    type="text"
                    id="userName"
                    placeholder="사용자 이름 입력"
                />
                <button>만들기</button>
            </form>
            <ul id="lists"></ul>
        </div>
        <div
            id="body"
            hidden
        >
            <div id="msg">
                <div style="padding: 1px"></div>
                <!-- <div class="my-chat">
                    <p>채팅테스트(나)</p>
                </div>
                <div class="other-chat">
                    <p>채팅테스트(상대방)</p>
                </div> -->
            </div>
            <form id="chat">
                <select id="userList"></select>
                <input
                    type="text"
                    id="message"
                    placeholder="메세지 입력"
                />
                <button>입력</button>
            </form>
        </div>

        <script>
            const socket = io();
            const roomForm = document.querySelector('#room');
            const chatForm = document.querySelector('#chat');
            const msg = document.querySelector('#msg');

            let myName;

            //룸리스트
            socket.on('roomList', (roomLists) => {
                console.log(roomLists);
                const lists = document.querySelector('#lists');
                lists.textContent = '';
                roomLists.forEach((roomList) => {
                    const li = document.createElement('li');
                    li.textContent = `${roomList} 와 닉네임 입력 후 입장`;
                    lists.appendChild(li);
                });
            });

            //사용자 리스트
            socket.on('userList', (userLists) => {
                console.log(userLists);
                const lists = document.querySelector('#userList');
                lists.textContent = '';
                let options = `<option value="all">전체</option>`;
                for (let i of userLists) {
                    options += `<option value="${i.key}">${userLists[key]}</option>`;
                }
                lists.innerHTML = options;
            });
            //메세지 띄우기
            socket.on('newMessage', (message, nick) => {
                console.log(message, nick);
                const div = document.createElement('div'); //밖div
                const p = document.createElement('p'); //안쪽p
                console.log('닉', myName);
                if (myName === nick) {
                    div.classList.add('my-chat');
                } else {
                    div.classList.add('other-chat');
                }
                //채팅텍스트
                p.textContent = `${nick}: ${message}`;
                div.appendChild(p);
                msg.appendChild(div);
            });
            socket.on('entranceUser', (userName) => {
                const h3 = document.createElement('h3');
                h3.innerText = `${userName}님이 입장하였습니다.`;
                h3.classList.add('announcement');
                msg.appendChild(h3);
            });
            socket.on('ear', (nick, message) => {
                const div = document.createElement('div'); //밖div
                const p = document.createElement('p'); //안쪽p

                console.log(123);
                p.textContent = `(속닥속닥)${nick}: ${message}`;
                if (myName === nick) {
                    div.classList.add('my-ear');
                } else {
                    div.classList.add('other-ear');
                }
                div.appendChild(p);
                msg.appendChild(div);
            });
            ///폼 이벤트
            roomForm.addEventListener('submit', (e) => {
                e.preventDefault();
                const roomName = roomForm.querySelector('#roomName');
                const userName = roomForm.querySelector('#userName');
                if (roomName.value === '' || userName.value === '') {
                    alert('방이름과 닉네임 적어주세요');
                    return;
                }
                socket.emit('create', roomName.value, userName.value, () => {
                    const main = document.querySelector('#main');
                    const body = document.querySelector('#body');
                    main.hidden = true;
                    body.hidden = false;
                    myName = userName.value;
                });
            });
            chatForm.addEventListener('submit', (e) => {
                e.preventDefault();
                const user = document.querySelector('#userList');
                const message = document.querySelector('#message');
                console.log(user.value);
                const msg = {
                    nick: myName,
                    user: user.value,
                    message: message.value,
                };
                socket.emit('sendMessage', msg);
                message.value = '';
            });
        </script>
    </body>
</html>
